# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: p060521api
# app and org for use with dashboard.serverless.com
app: apicomments
org: marcoarojas

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-1
  profile: user1
  # By default:
  #endpointType: EDGEa

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "lambda:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "comprehend:*"
        - "dynamodb:*"
        - "s3:*"
      Resource: "*"
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**

## *** Layers ******************************************************************************
## *** Cuando se va desplegar una layer en el mismo servicio, se declara y se establece: ***
#layers:
#  pandas:
#    path: /

functions:
  home:
    handler: handler.home
    events:
      - http:
          method: GET
          path: /
  helloUser:
    handler: handler.helloUser
    events:
      - http:
          method: GET
          path: /user/{name}
  createComment:
    handler: handler.createComment
    events:
      - http:
          method: POST
          path: /comments
  getComments:
    handler: handler.getComments
    events:
      - http:
          method: GET
          path: /comments
  updateComment:
    handler: handler.updateComment
    events:
      - http:
          method: PUT
          path: /comments/{id}
  deleteComment:
    handler: handler.deleteComment
    events:
      - http:
          method: DELETE
          path: /comments/{id}
  generateReport:
    handler: handler.generateReport
    events:
      - http:
          method: POST
          path: /reports
    layers:
      - arn:aws:lambda:us-west-1:899137275600:layer:pandas:1
      ## *** se hace referencia a las declaraci√≥nes ***
      #- {Ref: pandas}
      #pandas:
      #  path: arn:aws:lambda:us-west-1:899137275600:layer:pandas:1
  analyzeReport:
    handler: handler.analyzeReport
    events:
      - s3:
          bucket: bucket-hermus
          event: s3:ObjectCreated:*
          rules:
            - prefix: reports/comments/data
            - suffix: .csv
          existing: true
    layers:
      - arn:aws:lambda:us-west-1:899137275600:layer:pandas:1
  downloadReport:
    handler: handler.downloadReport
    events:
      - http:
          method: GET
          path: /reports/{name}
  getReports:
    handler: handler.getReports
    events:
      - http:
          method: GET
          path: /reports
  deleteReport:
    handler: handler.deleteReport
    events:
      - http:
          method: DELETE
          path: /reports/{name}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
